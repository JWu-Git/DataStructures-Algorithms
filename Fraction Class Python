def solution(n):
    class Fraction:
        def __init__(self, n, d):
            self.numerator = n
            self.denominator = d

        def __add__(self, other):
            return Fraction(self.numerator * other.denominator + other.numerator * self.denominator,
                            self.denominator * other.denominator)

        def __iadd__(self, other):
            return self.__add__(other)

        def __sub__(self, other):
            return Fraction(self.numerator * other.denominator - other.numerator * self.denominator,
                            self.denominator * other.denominator)

        def __mul__(self, other):
            return Fraction(self.numerator * other.numerator, self.denominator * other.denominator)

        def __truediv__(self, other):
            return self * Fraction(other.denominator, other.numerator)

        def __bool__(self):
            if self.numerator == 0:
                return False
            else:
                return True

        def getNumerator(self):
            return self.numerator

        def getDenominator(self):
            return self.denominator

        def __repr__(self):
            return '(' + str(self.numerator) + '/' + str(self.denominator) + ')'

        def reduce(self):
            if self.numerator == 0:
                return Fraction(0, 1)
            if self.numerator == 1 or self.denominator == 1:
                return self
            else:
                bigger = max(self.numerator, self.denominator)
                smaller = min(self.numerator, self.denominator)
                if bigger % smaller == 0:
                    return Fraction(self.numerator // smaller, self.denominator // smaller)
                while not smaller == 0 or smaller == 1:
                    bigger = bigger % smaller
                    temp = bigger
                    bigger = smaller
                    smaller = temp
                gcd = bigger
                return Fraction(self.numerator // gcd, self.denominator // gcd)

    combined_returns = [Fraction(0, 1) for x in range(0, 10)]

    for i in range(0, len(combined_returns)):
        combined_returns[i] += Fraction(1, 1)

    return [7, 6, 8, 21]
