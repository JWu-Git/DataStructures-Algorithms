#include <iostream>

using namespace std;

class Rat {

private:
    int n;
    int d;

public:

    // constructors
    Rat() {
        n = 0;
        d = 1;

    }

    Rat(int i, int j) {
        n = i;
        d = j;

    }
    Rat(int i) {
        n = i;
        d = 1;
    }

    //getters and setters
    int getN() {
        return n;
    }
    int getD() {
        return d;
    }
    void setN(int i) {
        n = i;
    }
    void setD(int i) {
        d = i;
    }

    //find gcd to see if Rat should be reduced
    int gcd() {
        int num = n;
        int den = d;
        if (num == den) {
            return num;
        }
        while (num > 0 and den > 0) {
            if (num > den) {
                num = num % den;
            }
            else {
                den = den % num;
            }
        }
        if (num == 0) return den;
        if (den == 0) return num;
    }

    void reduce(int factor) {
        n = n / factor;
        d = d / factor;
    }
    //arithmetic operators
    Rat operator + (Rat r) {
        Rat t;
        t.n = n * r.d + d * r.n;
        t.d = d * r.d;
        int gcd = 1;
        do {
            gcd = t.gcd();
            t.reduce(gcd);
        } while (gcd > 1);
        return t;
    }

    Rat operator - (Rat r) {
        Rat t;
        t.n = n * r.d - d * r.n;
        t.d = d * r.d;
        int gcd = 1;
        do {
            gcd = t.gcd();
            t.reduce(gcd);
        } while (gcd > 1);
        return t;
    }

    Rat operator * (Rat r) {
        Rat t;
        t.n = n * r.n;
        t.d = d * r.d;
        int gcd = 1;
        do {
            gcd = t.gcd();
            t.reduce(gcd);
        } while (gcd > 1);
        return t;
    }

    Rat operator / (Rat r) {
        Rat t;
        t.n = n * r.d;
        t.d = d * r.n;
        int gcd = 1;
        do {
            gcd = t.gcd();
            t.reduce(gcd);
        } while (gcd > 1);
        return t;
    }

    friend ostream& operator << (ostream& os, Rat r);
    friend istream& operator >> (istream& is, Rat& r);
}; //end Rat

ostream& operator << (ostream& os, Rat r) {
    int gcd = 1;
    do {
        gcd = r.gcd();
        r.reduce(gcd);
    } while (gcd > 1);
    if (r.n > r.d && r.d != 1 && r.d != 0) {
        os << r.n / r.d << " " << (r.n % r.d) << " / " << r.d << endl;
    }
    else {
        os << r.n << " / " << r.d << endl;
    }
    return os;
}

istream& operator >> (istream& is, Rat& r) {
    is >> r.n >> r.d;
    return is;
}
int main() {
    Rat x(1, 2), y(2, 3), z;
    z = x * y;
    cout << z;

    x.setN(3);
    y.setD(2);
    z = x + y;
    cout << z;
    cin >> x;
    cout << x;
    z = x + 5;
    cout << z;
    system("pause");
    return 0;
}
